SAM class ProgramNode:
	FunctionList: [FuncNode],
	StatList: [Stat]

JAN class FuncNode:
	Type: TypeNode,
	Ident: IdentNode,
	ParamList: [Param],
	StatList: [Stat]

ANDREA class Param:
	Type: TypeNode,
	Ident: IdentNode

interface Stat:
	....

PAUL class SkipNode implements Stat:
	....

SAM class BeginNode implements Stat:
	StatList: [Stat]

JAN class ReadNode implements Stat:
	ReadTarget: AssignLHS

ANDREA class FreeNode implements Stat:
	Expr: Expr

PAUL class ExitNode implements Stat:
	Expr: Expr

SAM class ReturnNode implements Stat:
	Expr: Expr

JAN class PrintlnNode implements Stat:
	Expr: Expr

ANDREA class PrintNode implements Stat:
	Expr: Expr

PAUL class IfNode implements Stat:
	PredicateExpr: Expr
	StatListTrue: [Stat]
	StatListFalse: [Stat]

SAM class WhileNode implements Stat:
	PredicateExpr: ExprNode
	LoopBody: [Stat]

JAN class AssignNode implements Stat:
	LHS: AssignLHSNode
	RHS: AssignRHSNode

ANDREA class DeclareNode implements Stat:
	Type: TypeNode
	Ident: IdentNode
	RHS: AssignRHS

interface TypeNode:
	...
A[5][6][7]
PAUL class ArrayTypeNode implements TypeNode:
	Type: TypeNode

SAM class PairTypeNode implements TypeNode:
	Type1: TypeNode ...
	Type2: TypeNode ...

JAN class PairElemTypeNode implements TypeNode....
	
interface AssignLHSNode:
	...

ANDREA class ArrayElemNode implements AssignLHSNode, ExprNode:
	Ident: IdentNode
	IndexExpressions: [ExprNode]

interface PairElemNode extends AssignLHSNode, AssignRHSNode:
	...

PAUL class PairElemFstNode implements PairElemNode:
	expr: ExprNode

SAM class PairElemSndNode implements PairElemNode:
	expr: ExprNode

JAN class IdentNode implements AssignLHSNode, ExprNode:
	ident: string

interface AssignRHSNode:
	...

ANDREA class CallNode implements AssignRHSNode:
	Ident: IdentNode
	ArgList: [ExprNode]

PAUL class NewPairNode implements AssignRHSNode:
	fstExpr: ExprNode
	sndExpr: ExprNode

SAM class ArrayLiterNode implements AssignRHSNode:
	list: [ExprNode]

interface ExprNode extends AssignRHSNode

JAN class BinOpExprNode implements ExprNode
	leftOperand: ExprNode
	rightOperand: ExprNode
	operator: string

ANDREA class IntLiterNode implements ExprNode
	num: number


PAUL class BoolLiterNode implements ExprNode 
	bool: boolean

SAM class CharLiterNode implements ExprNode
	ch: char

JAN class StrLiterNode implements ExprNode
	str: string

ANDREA class PairLiterNode implements ExprNode
	...

PAUL class UnopNode implements ExprNode
	unOp: string
	Expr: Expr




