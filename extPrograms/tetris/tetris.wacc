begin
    struct PollResult {
        int leftBtn,
        int rightBtn,
        int upBtn,
        int downBtn,
        int f1Btn

    }
    int pollBtns(struct PollResult btns) is
        btns.leftBtn = 0;
        btns.rightBtn = 0;
        btns.upBtn = 0;
        btns.downBtn = 0;
        btns.f1Btn  = 0;
        int c = 0;
        int in = 0;
            in = gpio 24;
            if (in == 1) then
                btns.leftBtn = 1
            else skip fi;

            in = gpio 27;
            if (in == 1) then
                btns.rightBtn = 1
            else skip fi;

            in = gpio 22;
            if (in == 1) then
                btns.upBtn = 1
            else skip fi;

            in = gpio 23;
            if (in == 1) then
                btns.downBtn = 1
            else skip fi;
            
            in = gpio 25;
            if (in == 1) then
                btns.f1Btn = 1
            else skip fi;

        return 0
    end

    # The time to wait before rendering a new frame
    int waitTime = 560000;
    int pollTime = 500;

    #starting location for all new blocks
    int startX = 4;
    int startY = 0;
    
    #get all the colours
    int currentColourScheme = 0;
    int[][] colourSchemes = call initialiseColours();
    int[] colours = colourSchemes[currentColourScheme];

    #pass in height, width to initilise grid
    int height = 18;
    int width = 10;
    int[][] grid = call initIntArray2D(0, width, height);

    int x = startX;
    int y = startY;

    int colourIndex = 0;

    #get the frame buffer
    int[] fb = get_frame_buffer;

    int[][][][] blocks = call Blocks();

    #initilise first block
    int blockIndex = 0;
    int rotationIndex = 0;

    int currentBlockRotationIndex = rotationIndex;

    int[][] block = blocks[blockIndex][rotationIndex];

    struct PollResult btns = new PollResult;

    call drawBlock(fb, block, x, y, colours[colourIndex]);

    int collision = 0;
    int keepLooping = 1;
    int count = 0;
    int in = 1;
    while (keepLooping == 1) do
        in = 0;
        count = 0;
        while (count < 140000) do
            call pollBtns(btns);
            if (btns.leftBtn == 1) then
                collision = call isColliding(block, grid, x - 1, y);
                if (collision == 0) then # If there is no collision
                    #erase square, 0 means black
                    call drawBlock(fb, block, x, y, 0);
                    x -= 1;
                    #draw updated square
                    call drawBlock(fb, block, x, y, colours[colourIndex])
                else skip fi
            
            else skip fi;

            if (btns.rightBtn == 1) then
                collision = call isColliding(block, grid, x + 1, y );
                if (collision == 0) then # If there is no collision
                    #erase square, 0 means black
                    call drawBlock(fb, block, x, y, 0);
                    x += 1;
                    #draw updated square
                    call drawBlock(fb, block, x, y, colours[colourIndex])
                else skip fi
            else skip fi;

            if (btns.downBtn == 1) then
                collision = call isColliding(block, grid, x, y + 1);
                if (collision == 0) then # If there is no collision
                      #erase square, 0 means black
                    call drawBlock(fb, block, x, y, 0);
                    y += 1;
                    #draw updated square
                    call drawBlock(fb, block, x, y, colours[colourIndex])
                else skip fi
            else skip fi;

            if (btns.upBtn == 1) then
                #erase square, 0 means black
                    call drawBlock(fb, block, x, y, 0);

                    int savedRotationIndex = rotationIndex;

                    #rotate
                    rotationIndex += 1;
                    if (rotationIndex == 4) then
                        rotationIndex = 0
                    else
                        rotationIndex = rotationIndex
                    fi;
                    
                    block = blocks[blockIndex][rotationIndex];

                    #if there is a collision then don't rotate, else keep rotated shape
                    collision = call isColliding(block, grid, x, y);
                    if (collision == 1) then
                        rotationIndex = savedRotationIndex;
                        block = blocks[blockIndex][rotationIndex]
                    else
                        skip
                    fi;

                    #draw updated square
                    call drawBlock(fb, block, x, y, colours[colourIndex])
            else skip fi;

            if (btns.f1Btn == 1) then
                currentColourScheme += 1;
                colourIndex = 0;
                if (currentColourScheme >= (len colourSchemes)) then
                    currentColourScheme = 0
                else skip fi;
                colours = colourSchemes[currentColourScheme]
            else skip fi;

            count += 1
        done;       
        collision = call isColliding(block, grid, x, y + 1);

        if (collision == 1) then
            call copyBlockToGrid(block, grid, x, y, colours[colourIndex]);

            #get info on what rows need to be shifted down
            int[] rowInfo = call detectRows(grid);

            #while we can still shift down, keep shifting down
            if (rowInfo[0] == 1) then
                call shiftDown(grid, rowInfo);
                skip
            else
                skip
            fi;


            call drawGrid(fb, grid);

            colourIndex += 1;
            if (colourIndex >= len colours) then
                colourIndex = 0
            else
                colourIndex = colourIndex
            fi;

            blockIndex += 1;
            if (blockIndex == len blocks) then
                blockIndex = 0
            else
                blockIndex = blockIndex
            fi;

            rotationIndex += 1;
            if (rotationIndex == 4) then
                rotationIndex = 0
            else
                rotationIndex = rotationIndex
            fi;
            
            block = blocks[blockIndex][rotationIndex];
            x = startX;
            y = startY;

            call drawBlock(fb, block, x, y, colours[colourIndex]);

            collision = call isColliding(block, grid, x, y);
            if (collision == 1) then keepLooping = 0 else skip fi;
            # Gameover in the true branch of this if
            skip
        else
            #erase square, 0 means black
            call drawBlock(fb, block, x, y, 0);

            #move block down
            y += 1;

            #draw updated square
            call drawBlock(fb, block, x, y, colours[colourIndex])
        fi
    done;

    

    while (true) do
        skip
    done;

    skip
end