header 

int[][] initIntArray2D(int val, int width, int height) is
	int[][] result = new int[][height];
	int i = 0;
	
	while (i < height) do
		int[] row = call initIntArray(val, width);
		result[i] = row;
		i += 1
	done;

	return result
end

int[] initIntArray(int val, int n) is
	int[] intArray = new int[n];
	int i = 0;
	while (i < n) do
		intArray[i] = val;
		i = i + 1
	done;

	return intArray
end

######## CONTAIN FUNCTIONS ######## 

bool containInt(int[] array, int x) is
	int index = 0;
	int length = len array;
	while index != length do
		if array[index] == x then return true
		else index = index + 1 fi
	done;
	return false
end

bool containChar(char[] array, char x) is
	int index = 0;
	int length = len array;
	while index != length do
		if array[index] == x then return true
		else index = index + 1 fi
	done;
	return false
end

bool containBool(bool[] array, bool x) is
	int index = 0;
	int length = len array;
	while index != length do
		if array[index] == x then return true
		else index = index + 1 fi
	done;
	return false
end

####### CONCATENATION FUNCTIONS #######

int[] concatIntArray(int[] x, int[] y) is
	int length = (len x) + (len y);
	int[] output = new int[length];
	int index = 0;
	int indexX = 0;
	while indexX < (len x) do
		output[index] = x[indexX];
		indexX = indexX + 1;
		index = index + 1
	done;

	int indexY = 0;
	while indexY < (len y) do
		output[index] = y[indexY];
		indexY = indexY + 1;
		index = index + 1
	done;
	return output
end

char[] concatCharArray(char[] x, char[] y) is
	int length = (len x) + (len y);
	char[] output = new char[length];
	int index = 0;
	int indexX = 0;
	while indexX < (len x) do
		output[index] = x[indexX];
		indexX = indexX + 1;
		index = index + 1
	done;

	int indexY = 0;
	while indexY < (len y) do
		output[index] = y[indexY];
		indexY = indexY + 1;
		index = index + 1
	done;
	return output
end

bool[] concatBoolArray(bool[] x, bool[] y) is
	int length = (len x) + (len y);
	bool[] output = new bool[length];
	int index = 0;
	int indexX = 0;
	while indexX < (len x) do
		output[index] = x[indexX];
		indexX = indexX + 1;
		index = index + 1
	done;

	int indexY = 0;
	while indexY < (len y) do
		output[index] = y[indexY];
		indexY = indexY + 1;
		index = index + 1
	done;
	return output
end

######## INITIALIZE FUNCTIONS ########

# Fills an array with 'n' vals



bool[] initBoolArray(bool val, int n) is
	bool[] boolArray = new bool[n];
	int i = 0;
	while (i < n) do
		boolArray[i] = val;
		i = i + 1
	done;
	return boolArray
end

char[] initCharArray(char val, int n) is
	char[] charArray = new char[n];
	int i = 0;
	while (i < n) do
		charArray[i] = val;
		i = i + 1
	done;
	return charArray
end

######## COPY FUNCTIONS ########

int[] copyIntArray(int[] x) is
	int[] y = new int[0];
	int[] copy = call concatIntArray(x, y);
	return copy
end

char[] copyCharArray(char[] x) is
	char[] y = new char[0];
	char[] copy = call concatCharArray(x, y);
	return copy
end

bool[] copyBoolArray(bool[] x) is
	bool[] y = new bool[0];
	bool[] copy = call concatBoolArray(x, y);
	return copy
end

######## SORT FUNCTION ########



int quickSort(int[] a) is
	int dontCare = call quickSort2(a, 0, (len a) - 1);
	return 0
end


int swap(int[] a, int i, int j) is
	int temp = a[i];
	a[i] = a[j];
	a[j] = temp;
	return 0
end

int partition(int[] a, int lo, int hi) is
	int pivot = a[hi];
	int i = lo;
	int j = lo;
	while j <= (hi - 1) do
		if a[j] <= pivot then
			int dontCare = call swap(a, i, j);
			i = i + 1
		else
			skip
		fi;
		j = j + 1
	done;
	int dontCare = call swap(a, i, j);
	return i
end


int quickSort2(int[] a, int lo, int hi) is
	if lo >= hi
		then return 0
		else skip
	fi;
	int p = call partition(a, lo, hi);
	int dontCare = call quickSort2(a, lo, p - 1);
	dontCare = call quickSort2(a, p + 1, hi);
	return 0
end 

	


######## PRINT FUNCTIONS ########
int printIntArray2D(int[][] grid) is
	int i = 0;
	while (i < len grid) do
		call printIntArray(grid[i]);
		i += 1
	done;
	return 0
end

int printIntArray(int[] x) is
	int index = 0;
	print '[';
	print x[index];
	index = index + 1;
	while index < (len x) do
		print ',';
		print ' ';
		print x[index];
		index = index + 1
	done;
	print ']';
	println ' ';
	return 0
end

int printCharArray(char[] x) is
	int index = 0;
	print '[';
	print x[index];
	index = index + 1;
	while index < (len x) do
		print ',';
		print ' ';
		print x[index];
		index = index + 1
	done;
	print ']';
	println ' ';
	return 0
end

int printBoolArray(bool[] x) is
	int index = 0;
	print '[';
	print x[index];
	index = index + 1;
	while index < (len x) do
		print ',';
		print ' ';
		print x[index];
		index = index + 1
	done;
	print ']';
	println ' ';
	return 0
end

######## FILL ARRAY FUNCTIONS ########

int[] fillIntArray(int val, int[] array) is
	int length = len array;
	int i = 0;
	while (i < length) do
		array[i] = val;
		i = i + 1
	done;

	return array
end	


char[] fillCharArray(char val, char[] array) is
	int length = len array;
	int i = 0;
	while (i < length) do
		array[i] = val;
		i = i + 1
	done;

	return array
end	


bool[] fillBoolArray(bool val, bool[] array) is
	int length = len array;
	int i = 0;
	while (i < length) do
		array[i] = val;
		i = i + 1
	done;

	return array
end	

end